/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Bogdan
 */
public class invert2 extends javax.swing.JFrame {

    /**
     * Creates new form invert2
     */
    public invert2() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Invert your text");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jButton1.setLabel("Invert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText("");
        jTextArea1.setInheritsPopupMenu(true);
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.getAccessibleContext().setAccessibleName("");
        jTextArea1.getAccessibleContext().setAccessibleDescription("");

        jButton2.setText("Copy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Paste");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Translit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(0, 47, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(5, 5, 5))
        );

        jButton1.getAccessibleContext().setAccessibleName("invert_button");
        jButton2.getAccessibleContext().setAccessibleName("copy_button");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String get_invert(String text){
        String invert_text = "";
        char[] char_text = text.toCharArray();
        System.out.println(Arrays.toString(char_text));
        for(int i=0;i<char_text.length;i++){
            switch(char_text[i]){
                //lat -> kir
                case 'q': char_text[i] = 'й'; break;
                    case 'Q': char_text[i] = 'Й'; break;
                case 'w': char_text[i] = 'ц'; break;
                    case 'W': char_text[i] = 'Ц'; break;
                case 'e': char_text[i] = 'у'; break;
                    case 'E': char_text[i] = 'У'; break;
                case 'r': char_text[i] = 'к'; break;
                    case 'R': char_text[i] = 'К'; break;
                case 't': char_text[i] = 'е'; break;
                    case 'T': char_text[i] = 'Е'; break;
                case 'y': char_text[i] = 'н'; break;
                    case 'Y': char_text[i] = 'Н'; break;
                case 'u': char_text[i] = 'г'; break;
                    case 'U': char_text[i] = 'Г'; break;
                case 'i': char_text[i] = 'ш'; break;
                    case 'I': char_text[i] = 'Ш'; break;
                case 'o': char_text[i] = 'щ'; break;
                    case 'O': char_text[i] = 'Щ'; break;
                case 'p': char_text[i] = 'з'; break;
                    case 'P': char_text[i] = 'З'; break;
                case '[': char_text[i] = 'х'; break;
                    case '{': char_text[i] = 'Х'; break;
                case ']': char_text[i] = 'ъ'; break;
                    case '}': char_text[i] = 'Ъ'; break;
                case '\\': char_text[i] = '\\'; break;   //тупняк. одинаковое. может у меня клава тупая
                    case '|': char_text[i] = '/'; break;
                    
                case 'a': char_text[i] = 'ф'; break;
                    case 'A': char_text[i] = 'Ф'; break;
                case 's': char_text[i] = 'ы'; break;
                    case 'S': char_text[i] = 'Ы'; break;
                case 'd': char_text[i] = 'в'; break;
                    case 'D': char_text[i] = 'В'; break;
                case 'f': char_text[i] = 'а'; break;
                    case 'F': char_text[i] = 'А'; break;
                case 'g': char_text[i] = 'п'; break;
                    case 'G': char_text[i] = 'П'; break;
                case 'h': char_text[i] = 'р'; break;
                    case 'H': char_text[i] = 'Р'; break;
                case 'j': char_text[i] = 'о'; break;
                    case 'J': char_text[i] = 'О'; break;
                case 'k': char_text[i] = 'л'; break;
                    case 'K': char_text[i] = 'Л'; break;
                case 'l': char_text[i] = 'д'; break;
                    case 'L': char_text[i] = 'Д'; break;
                case ';': char_text[i] = 'ж'; break; 
                    case ':': char_text[i] = 'Ж'; break;
                case '\'': char_text[i] = 'э'; break;  ////
                    case '"': char_text[i] = 'Э'; break;
                
                    
                case 'z': char_text[i] = 'я'; break;
                    case 'Z': char_text[i] = 'Я'; break;
                case 'x': char_text[i] = 'ч'; break;
                    case 'X': char_text[i] = 'Ч'; break;
                case 'c': char_text[i] = 'с'; break;
                    case 'C': char_text[i] = 'С'; break;
                case 'v': char_text[i] = 'м'; break;
                    case 'V': char_text[i] = 'М'; break;
                case 'b': char_text[i] = 'и'; break;
                    case 'B': char_text[i] = 'И'; break;
                case 'n': char_text[i] = 'т'; break;
                    case 'N': char_text[i] = 'Т'; break;
                case 'm': char_text[i] = 'ь'; break;
                    case 'M': char_text[i] = 'Ь'; break;
                case ',': char_text[i] = 'б'; break;
                    case '<': char_text[i] = 'Б'; break;
                case '.': char_text[i] = 'ю'; break;
                    case '>': char_text[i] = 'Ю'; break;
                case '/': char_text[i] = '.'; break; 
                    case '?': char_text[i] = ','; break;
                   
                    //kir -> lat
                case 'й': char_text[i] = 'q'; break;
                    case 'Й': char_text[i] = 'Q'; break;
                case 'ц': char_text[i] = 'w'; break;
                    case 'Ц': char_text[i] = 'W'; break;
                case 'у': char_text[i] = 'e'; break;
                    case 'У': char_text[i] = 'E'; break;
                case 'к': char_text[i] = 'r'; break;
                    case 'К': char_text[i] = 'R'; break;
                case 'е': char_text[i] = 't'; break;
                    case 'Е': char_text[i] = 'T'; break;
                case 'н': char_text[i] = 'y'; break;
                    case 'Н': char_text[i] = 'Y'; break;
                case 'г': char_text[i] = 'u'; break;
                    case 'Г': char_text[i] = 'U'; break;
                case 'ш': char_text[i] = 'i'; break;
                    case 'Ш': char_text[i] = 'I'; break;
                case 'щ': char_text[i] = 'o'; break;
                    case 'Щ': char_text[i] = 'O'; break;
                case 'з': char_text[i] = 'p'; break;
                    case 'З': char_text[i] = 'P'; break;
                case 'х': char_text[i] = '['; break;
                    case 'Х': char_text[i] = '{'; break;
                case 'ъ': char_text[i] = ']'; break;
                    case 'Ъ': char_text[i] = '}'; break;
                //case '\\': char_text[i] = '\\'; break;   //
                    //case '/\': char_text[i] = '/'; break;  //разобраться
                    
                case 'ф': char_text[i] = 'a'; break;
                    case 'Ф': char_text[i] = 'A'; break;
                case 'ы': char_text[i] = 's'; break;
                    case 'Ы': char_text[i] = 'S'; break;
                case 'в': char_text[i] = 'd'; break;
                    case 'В': char_text[i] = 'D'; break;
                case 'а': char_text[i] = 'f'; break;
                    case 'А': char_text[i] = 'F'; break;
                case 'п': char_text[i] = 'g'; break;
                    case 'П': char_text[i] = 'G'; break;
                case 'р': char_text[i] = 'h'; break;
                    case 'Р': char_text[i] = 'H'; break;
                case 'о': char_text[i] = 'j'; break;
                    case 'О': char_text[i] = 'J'; break;
                case 'л': char_text[i] = 'k'; break;
                    case 'Л': char_text[i] = 'K'; break;
                case 'д': char_text[i] = 'l'; break;
                    case 'Д': char_text[i] = 'L'; break;
                case 'ж': char_text[i] = ';'; break; 
                    case 'Ж': char_text[i] = ':'; break;
                case 'э': char_text[i] = '\''; break;  ////
                    case 'Э': char_text[i] = '"'; break;
                
                    
                case 'я': char_text[i] = 'z'; break;
                    case 'Я': char_text[i] = 'Z'; break;
                case 'ч': char_text[i] = 'x'; break;
                    case 'Ч': char_text[i] = 'X'; break;
                case 'с': char_text[i] = 'c'; break;
                    case 'С': char_text[i] = 'C'; break;
                case 'м': char_text[i] = 'v'; break;
                    case 'М': char_text[i] = 'V'; break;
                case 'и': char_text[i] = 'b'; break;
                    case 'И': char_text[i] = 'B'; break;
                case 'т': char_text[i] = 'n'; break;
                    case 'Т': char_text[i] = 'N'; break;
                case 'ь': char_text[i] = 'm'; break;
                    case 'Ь': char_text[i] = 'M'; break;
                case 'б': char_text[i] = ','; break;
                    case 'Б': char_text[i] = '<'; break;
                case 'ю': char_text[i] = '.'; break;
                    case 'Ю': char_text[i] = '>'; break;
//                case '.': char_text[i] = '/'; break; 
//                    case ',': char_text[i] = '?'; break;
                //default:
                case '&': char_text[i] = '?'; break;
                case '^': char_text[i] = ':'; break;
                case '$': char_text[i] = ';'; break;
                case '#': char_text[i] = '№'; break;
                case '@': char_text[i] = '"'; break;        
                       
            }
            invert_text+=char_text[i];
        }
        
        return invert_text;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText(get_invert(jTextArea1.getText()));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //String text = jTextArea1.getText();
        jTextArea1.selectAll();
        jTextArea1.copy();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTextArea1.paste();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText(null);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText(toTranslit(jTextArea1.getText()));
    }//GEN-LAST:event_jButton5ActionPerformed

    private static final Map<String, String> letters = new HashMap<String, String>();
    static {
        letters.put("А", "A");
        letters.put("Б", "B");
        letters.put("В", "V");
        letters.put("Г", "G");
        letters.put("Д", "D");
        letters.put("Е", "E");
        letters.put("Ё", "Jo");
        letters.put("Ж", "Zh");
        letters.put("З", "Z");
        letters.put("И", "I");
        letters.put("Й", "J");
        letters.put("К", "K");
        letters.put("Л", "L");
        letters.put("М", "M");
        letters.put("Н", "N");
        letters.put("О", "O");
        letters.put("П", "P");
        letters.put("Р", "R");
        letters.put("С", "S");
        letters.put("Т", "T");
        letters.put("У", "U");
        letters.put("Ф", "F");
        letters.put("Х", "H");
        letters.put("Ц", "C");
        letters.put("Ч", "Ch");
        letters.put("Ш", "Sh");
        letters.put("Щ", "Shh");
        letters.put("Ъ", "#");
        letters.put("Ы", "Y");
        letters.put("Ь", "'");
        letters.put("Э", "Je");
        letters.put("Ю", "Ju");
        letters.put("Я", "Ja");//////
        letters.put("а", "a");
        letters.put("б", "b");
        letters.put("в", "v");
        letters.put("г", "g");
        letters.put("д", "d");
        letters.put("е", "e");
        letters.put("ё", "jo");
        letters.put("ж", "zh");
        letters.put("з", "z");
        letters.put("и", "i");
        letters.put("й", "j");
        letters.put("к", "k");
        letters.put("л", "l");
        letters.put("м", "m");
        letters.put("н", "n");
        letters.put("о", "o");
        letters.put("п", "p");
        letters.put("р", "r");
        letters.put("с", "s");
        letters.put("т", "t");
        letters.put("у", "u");
        letters.put("ф", "f");
        letters.put("х", "h");
        letters.put("ц", "c");
        letters.put("ч", "ch");
        letters.put("ш", "sh");
        letters.put("щ", "shh");
        letters.put("ъ", "#");
        letters.put("ы", "y");
        letters.put("ь", "'");
        letters.put("э", "je");
        letters.put("ю", "ju");
        letters.put("я", "ja");
        
        letters.put("A", "А");
        letters.put("B", "Б");
        letters.put("V", "В");
        letters.put("G", "Г");
        letters.put("D", "Д");
        letters.put("E", "Е");
        letters.put("Jo", "Ё");
        letters.put("Zh", "Ж");
        letters.put("Z", "З");
        letters.put("I", "И");
        letters.put("J", "Й");
        letters.put("K", "К");
        letters.put("L", "Л");
        letters.put("M", "М");
        letters.put("N", "Н");
        letters.put("O", "О");
        letters.put("P", "П");
        letters.put("R", "Р");
        letters.put("S", "С");
        letters.put("T", "Т");
        letters.put("U", "У");
        letters.put("F", "Ф");
        letters.put("H", "Х");
        letters.put("C", "Ц");
        letters.put("Ch", "Ч");
        letters.put("Sh", "Ш");
        letters.put("Shh", "Щ");
        letters.put("'", "Ъ");
        letters.put("Y", "Ы");
        letters.put("#", "Ь");
        letters.put("Je", "Э"); 
        letters.put("Ju", "Ю");
        letters.put("Ja", "Я"); /////////////////////
        letters.put("a", "а");
        letters.put("b", "б");
        letters.put("v", "в");
        letters.put("g", "г");
        letters.put("d", "д");
        letters.put("e", "е");
        letters.put("je", "ё");
        letters.put("zh", "ж");
        letters.put("z", "з");
        letters.put("i", "и");
        letters.put("j", "й");
        letters.put("k", "к");
        letters.put("l", "л");
        letters.put("m", "м");
        letters.put("n", "н");
        letters.put("o", "о");
        letters.put("p", "п");
        letters.put("r", "р");
        letters.put("s", "с");
        letters.put("t", "т");
        letters.put("u", "у");
        letters.put("f", "ф");
        letters.put("h", "х");
        letters.put("c", "ц");
        letters.put("ch", "ч");
        letters.put("sh", "ш");
        letters.put("shh", "щ");
        letters.put("#", "ъ");
        letters.put("y", "ы");
        letters.put("'", "ь");
        letters.put("je", "э"); 
        letters.put("ju", "ю");
        letters.put("ja", "я");
    }
    
    public static String toTranslit(String text) {
        StringBuilder sb = new StringBuilder(text.length());
        for (int i = 0; i<text.length(); i++) {
            String l = text.substring(i, i+1);
            if (letters.containsKey(l)) {
                sb.append(letters.get(l));
            }
            else {
                sb.append(l);
            }
        }
        return sb.toString();
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(invert2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(invert2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(invert2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(invert2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new invert2().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
